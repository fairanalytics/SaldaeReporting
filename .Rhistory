git2r::ssh_path(file = "C:/Temp/.ssh/id_ed25519.pub")
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main")
git2r::ssh_path()
# repo <- clone(github_url, local_path  = local_path)
git2r::ssh_path(file = "C:/Temp/.ssh/id_ed25519.pub")
# repo <- clone(github_url, local_path  = local_path)
# git2r::ssh_path(file = "C:/Temp/.ssh/id_ed25519.pub")
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main")
git2r::ssh_path()
?git2r::cred_ssh_key
# repo <- clone(github_url, local_path  = local_path)
# git2r::ssh_path(file = "C:/Temp/.ssh/id_ed25519.pub")
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main")
ssh_path()
cred_ssh_key(
publickey = ssh_path("id_rsa.pub"),
privatekey = ssh_path("id_rsa"),
passphrase = "AZOfar06*"
)
# repo <- clone(github_url, local_path  = local_path)
# git2r::ssh_path(file = "C:/Temp/.ssh/id_ed25519.pub")
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main")
library("git2r")
?git2r::push
# repo <- clone(github_url, local_path  = local_path)
# git2r::ssh_path(file = "C:/Temp/.ssh/id_ed25519.pub")
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main", credentials = git2r::cred_ssh_key())
git2r::cred_ssh_key()
publickey = ssh_path("id_rsa.pub")
publickey
publickey%>%file.exists()
my_ssh_key <- git2r::cred_ssh_key(
publickey = ssh_path("id_rsa.pub"),
privatekey = ssh_path("id_rsa"),
passphrase = "AZOfar06*"
)
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main",
credentials = my_ssh_key)
my_ssh_key
library(git2r)
push()
push(credentials = cred_ssh_key())
# repo <- clone(github_url, local_path  = local_path)
my_ssh_key <- git2r::cred_ssh_key(
publickey = ssh_path("id_rsa.pub"),
privatekey = ssh_path("id_rsa"),
passphrase = "AZOfar06*"
)
my_ssh_key
# repo <- clone(github_url, local_path  = local_path)
my_ssh_key <- git2r::cred_ssh_key(
publickey = ssh_path("id_rsa.pub"),
privatekey = ssh_path("id_rsa"),
passphrase = "AZOfar06*"
)
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main",
credentials = my_ssh_key)
ssh_path("id_rsa.pub")
file.exists(ssh_path("id_rsa.pub"))
ssh_path("id_rsa")
file.exists(ssh_path("id_rsa"))
?git2r::push
my_ssh_key
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main",
credentials  = my_ssh_key)
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main",
credentials  = my_ssh_key)
git2r::config()
#
git2r::config(repo = local_repo,user.name = "Fair Analytics",user.email = "fairanalytics@outlook.com" )
git2r::config()
git2r
?git2r::config
local_path <- "./reporting/to_publish/"
github_url <- "https://github.com/fairanalytics/saldae_dashboard"
if(!dir.exists(local_path)) dir.create(local_path, recursive = TRUE)
local_repo <- git2r::init(local_path, branch = "main")
#
git2r::config(repo = local_repo,global = TRUE,user.name = "Fair Analytics",user.email = "fairanalytics@outlook.com" )
file.copy(from = target_report, to = paste0(local_path,"index.html"))
git2r::add(repo = local_repo , path = paste0(local_path,"index.html"))
git2r::commit(repo = local_repo, message = "my intital commit")
git2r::remote_add(repo = local_repo, name = "saldae_dashboard", url = github_url)
git2r::fetch(repo = local_repo, name = "saldae_dashboard")
my_ssh_key <- git2r::cred_ssh_key(
publickey = ssh_path("id_rsa.pub"),
privatekey = ssh_path("id_rsa"),
passphrase = "AZOfar06*"
)
git2r::push(object = local_repo , name = "saldae_dashboard", "refs/heads/main",
credentials  = my_ssh_key)
local_path <- "./reporting/to_publish/"
github_url <- "https://github.com/fairanalytics/saldae_dashboard"
if(!dir.exists(local_path)) dir.create(local_path, recursive = TRUE)
local_repo <- git2r::init(local_path, branch = "main")
#
git2r::config(repo = local_repo,global = TRUE,user.name = "Fair Analytics",user.email = "fairanalytics@outlook.com" )
file.copy(from = target_report, to = paste0(local_path,"index.html"))
git2r::add(repo = local_repo , path = paste0(local_path,"index.html"))
git2r::commit(repo = local_repo, message = "my intital commit")
git2r::remote_add(repo = local_repo, name = "origin", url = github_url)
git2r::fetch(repo = local_repo, name = "origin")
my_ssh_key <- git2r::cred_ssh_key(
publickey = ssh_path("id_rsa.pub"),
privatekey = ssh_path("id_rsa"),
passphrase = "AZOfar06*"
)
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key)
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key, set_upstream = TRUE)
?git2r::ssl_cert_locations
git2r::ssl_cert_locations()
ssh_path("id_rsa.pub")
"C:\\Users\\Lenovo\\.ssh\\id_ed25519.pub"%>%file.exists()
my_ssh_key <- git2r::cred_ssh_key(
publickey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519.pub",
privatekey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519",
passphrase = "AZOfar06*"
)
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key, set_upstream = TRUE)
View(git2r::push)
object
?get_upstream_name
# install.packages("devtools")
library(devtools)
install_github("ropensci/git2r")
local_path <- "./reporting/to_publish/"
github_url <- "git@github.com:fairanalytics/saldae_dashboard.git"
if(!dir.exists(local_path)) dir.create(local_path, recursive = TRUE)
local_repo <- git2r::init(local_path, branch = "main")
#
git2r::config(repo = local_repo,global = TRUE,user.name = "Fair Analytics",user.email = "fairanalytics@outlook.com" )
file.copy(from = target_report, to = paste0(local_path,"index.html"))
git2r::add(repo = local_repo , path = paste0(local_path,"index.html"))
git2r::commit(repo = local_repo, message = "my intital commit")
git2r::remote_add(repo = local_repo, name = "origin", url = github_url)
git2r::fetch(repo = local_repo, name = "origin")
my_ssh_key <- git2r::cred_ssh_key(
publickey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519.pub",
privatekey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519",
passphrase = "AZOfar06*"
)
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key, set_upstream = TRUE)
my_ssh_key
local_path <- "./reporting/to_publish/"
github_url <- "git@github.com:fairanalytics/saldae_dashboard.git"
if(!dir.exists(local_path)) dir.create(local_path, recursive = TRUE)
local_repo <- git2r::init(local_path, branch = "main")
#
git2r::config(repo = local_repo,global = TRUE,user.name = "Fair Analytics",user.email = "fairanalytics@outlook.com" )
file.copy(from = target_report, to = paste0(local_path,"index.html"))
git2r::add(repo = local_repo , path = paste0(local_path,"index.html"))
git2r::commit(repo = local_repo, message = "my intital commit")
git2r::remote_add(repo = local_repo, name = "origin", url = github_url)
my_ssh_key <- git2r::cred_ssh_key(
publickey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519.pub",
privatekey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519",
passphrase = "AZOfar06*"
)
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key, set_upstream = TRUE)
git2r::fetch(repo = local_repo, name = "origin", credentials = my_ssh_key)
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key, set_upstream = TRUE)
git2r::pull(repo = local_repo, credentials = my_ssh_key)
?git2r::pull
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key, set_upstream = TRUE, force = TRUE)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
saldae_publihser_f()
?file.copy
local_path <- "./reporting/to_publish/"
github_url <- "git@github.com:fairanalytics/saldae_dashboard.git"
if(!dir.exists(local_path)) dir.create(local_path, recursive = TRUE)
local_repo <- git2r::init(local_path, branch = "main")
#
git2r::config(repo = local_repo,global = TRUE,user.name = "Fair Analytics",user.email = "fairanalytics@outlook.com" )
file.copy(from = target_report, to = paste0(local_path,"root/index.html"),recursive  = TRUE)
paste0(local_path,"root/index.html")
dir.create(paste0(local_path,"root/")
file.copy(from = target_report, to = paste0(local_path,"root/index.html"),recursive  = TRUE)
git2r::add(repo = local_repo , path = paste0(local_path,"index.html"))
git2r::commit(repo = local_repo, message = "my intital commit")
git2r::remote_add(repo = local_repo, name = "origin", url = github_url)
my_ssh_key <- git2r::cred_ssh_key(
publickey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519.pub",
privatekey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519",
passphrase = "AZOfar06*"
)
git2r::fetch(repo = local_repo, name = "origin", credentials = my_ssh_key)
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key, set_upstream = TRUE, force = TRUE)
# git2r::pull(repo = local_repo, credentials = my_ssh_key)
# git2r::pull(repo = local_repo)
}
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
saldae_publihser_f()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
saldae_publihser_f()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
saldae_publihser_f()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
Sys.setenv(SSH_KEY =  "AZOfar06*")
Sys.getenv("SSH_KEY")
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
saldae_publihser_f()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
SaldaeAnalyticsDashboard::run_app()
Sys.getenv("SSH_KEY")
Sys.setenv(SSH_KEY =  "AZOfar06*")
Sys.getenv("SSH_KEY")
Sys.setenv()
Sys.getenv()
?Sys.setenv
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
Sys.getenv("SSH_KEY = AZOfar06*")
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
Sys.getenv(SSH_KEY = "AZOfar06*")
Sys.setenv(SSH_KEY = "AZOfar06*")
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
Sys.getenv("SSH_KEY")
library(SaldaeReporting)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
template_folder <- "publisher"
system.file(template_folder, package = "SaldaeReporting")
repo_path <- "./reporting/to_publish"
#
if(!dir.exists(repo_path))file.copy(system.file(template_folder, package = "SaldaeReporting"), to = repo_path)
#
if(!dir.exists(repo_path))file.copy(system.file(template_folder, package = "SaldaeReporting"), to = repo_path)
file.copy(system.file(template_folder, package = "SaldaeReporting"), to = repo_path, recursive=TRUE)
system.file(template_folder, package = "SaldaeReporting")
#
if(!dir.exists(repo_path))file.copy(paste0(system.file(template_folder, package = "SaldaeReporting"),"/*"), to = repo_path, recursive=TRUE)
system.file(template_folder, package = "SaldaeReporting"),"/*")
paste0(system.file(template_folder, package = "SaldaeReporting"),"/*")
file.copy(paste0(system.file(template_folder, package = "SaldaeReporting"),"/*"), to = repo_path)
system.file(template_folder, package = "SaldaeReporting")%>%list.files()
library(dplyr)
file.copy(paste0(system.file(template_folder, package = "SaldaeReporting"),"/*"), to = repo_path)
system.file(template_folder, package = "SaldaeReporting")%>%list.files()
system.file(template_folder, package = "SaldaeReporting")%>%list.files(full.names = TRUE)
dir.create(repo_path)
site_files <- system.file(template_folder, package = "SaldaeReporting")%>%list.files(full.names = TRUE)
file.copy(site_files , to = repo_path)
site_files
?file.copy
file.copy(site_files , to = repo_path, recursive = TRUE)
R.utils::copyDirectory
R.utils::copyDirectory(system.file(template_folder, package = "SaldaeReporting"), repo_path)
repo_path
file.copy(from = site_files , to = repo_path, recursive = TRUE)
R.utils::copyDirectory(system.file(template_folder, package = "SaldaeReporting"), repo_path)
#
if(!dir.exists(repo_path)){
R.utils::copyDirectory(system.file(template_folder, package = "SaldaeReporting"), repo_path)
}
site_yml_file <- "_site.yml"
publisher_yml <- yaml::read_yaml(site_yml_file)
site_yml_file
site_yml_file <- "./to_publish/_site.yml"
publisher_yml <- yaml::read_yaml(site_yml_file)
repo_path
site_yml_file <- paste0(repo_path,"/_site.yml")
site_yml_file
publisher_yml <- yaml::read_yaml(site_yml_file)
available_reports <- publisher_yml$navbar$left
available_report_names <- lapply(available_reports, function(x)x$text)
if(report_name%in%available_report_names){
report_index <- which(available_report_names==report_name)
}else{
report_index <- length(available_reports)+1
available_reports[[report_index]][["text"]] <- paste0("Report_",report_index)
available_reports[[report_index]][["href"]] <- report_name
publisher_yml$navbar$left  <- available_reports
yaml::write_yaml(x = publisher_yml, file = site_yml_file)
}
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
target_report = "Saldae_main_report.html"
local_path <- "./reporting/to_publish/"
github_url <- "git@github.com:fairanalytics/saldae_dashboard.git"
publishing_info <- update_publisher(new_report_name = target_report, repo_path = local_path)
Saldae_main_report.html
target_report
local_path
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
?rmarkdown::render_site
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
local_path <- "./reporting/to_publish/"
github_url <- "git@github.com:fairanalytics/saldae_dashboard.git"
target_report = "Saldae_main_report.html"
publishing_info <- update_publisher(new_report_name = target_report, repo_path = local_path)
new_report_name = target_report
repo_path = local_path
output <- list()
#
if(!dir.exists(repo_path)){
R.utils::copyDirectory(system.file(template_folder, package = "SaldaeReporting"), repo_path)
}
# copy the new report
file.copy(from = paste0(gsub("to_publish/","",local_path),new_report_name), to = local_path )
#
site_yml_file <- paste0(repo_path,"/_site.yml")
publisher_yml <- yaml::read_yaml(site_yml_file)
available_reports <- publisher_yml$navbar$left
available_report_names <- lapply(available_reports, function(x)x$text)
if(new_report_name%in%available_report_names){
output$is_new <- FALSE
report_index <- which(available_report_names==new_report_name)
}else{
output$is_new <- TRUE
report_index <- length(available_reports)+1
available_reports[[report_index]][["text"]] <- new_report_name
available_reports[[report_index]][["href"]] <- new_report_name
publisher_yml$navbar$left  <- available_reports
yaml::write_yaml(x = publisher_yml, file = site_yml_file)
}
report_index
publisher_yml
report_index
available_reports[[report_index]]
available_reports
available_reports[[1]]
class(available_reports[[1]])
available_reports[[report_index]] <- list()
available_reports[[report_index]][["text"]] <- new_report_name
available_reports[[report_index]][["href"]] <- new_report_name
publisher_yml$navbar$left  <- available_reports
publisher_yml
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
target_report = "Saldae_main_report.html"
local_path <- "./reporting/to_publish/"
github_url <- "git@github.com:fairanalytics/saldae_dashboard.git"
publishing_info <- update_publisher(new_report_name = target_report, repo_path = local_path)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
local_path
#. initialize the repository
local_repo <- git2r::init(paste0(local_path,"_site"), branch = "main")
#. add conifguration for git
git2r::config(repo = local_repo,global = TRUE,user.name = "Fair Analytics",user.email = "fairanalytics@outlook.com" )
git2r::status()
git2r::status(repo = local_repo)
repo_status <- git2r::status(repo = local_repo)
repo_status$staged
repo_status$unstaged
repo_status$untracked
unlist(repo_status$untracked)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
untracked_files <- unlist(repo_status$untracked)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
git2r::add(repo = local_repo , path = untracked_files)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
git2r::commit(repo = local_repo, message = paste("publishing report:",target_report))
git2r::remote_add(repo = local_repo, name = "origin", url = github_url)
Sys.setenv(SSH_KEY = "AZOfar06*")
warning("make sure to move SSH key to ENV variable")
my_ssh_key <- git2r::cred_ssh_key(
publickey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519.pub",
privatekey = "C:\\Users\\Lenovo\\.ssh\\id_ed25519",
passphrase = Sys.getenv("SSH_KEY")
)
git2r::fetch(repo = local_repo, name = "origin", credentials = my_ssh_key)
git2r::push(object = local_repo , name = "origin", "refs/heads/main",
credentials  = my_ssh_key, set_upstream = TRUE, force = TRUE)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
local_path <- "./reporting/to_publish/"
publishing_info <- update_publisher(new_report_name = target_report, repo_path = local_path)
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
?rmarkdown::render
library(SaldaeReporting)
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
source('~/Saldae Platform/SaldaeReporting/R/saldae_publisher.R')
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
"./reporting/"%>%list.files()
"./reporting/"%>%list.files(full.names = TRUE)%>%file.remove()
?list.files
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
file.remove("./reporting/Sale")
file.remove("./reporting/Sales")
list.files("./reporting")
list.files("./reporting", full.names = TRUE)
file.remove(list.files("./reporting", full.names = TRUE))
unlink(list.files("./reporting", full.names = TRUE))
unlink(list.files("./reporting", full.names = TRUE), force = TRUE,recursive = TRUE)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
library(SaldaeReporting)
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
SaldaeAnalyticsDashboard::run_app()
